/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.1/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/integrationTest/java'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // H2 database for runtime
    runtimeOnly 'com.h2database:h2'

    integrationTestImplementation 'io.rest-assured:rest-assured:5.3.0'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

ext {
    srcLocation = 'src'
    backupLocation = 'backup'
    zipLocation = 'zipBackups/archives'
}

test {
    // Use JUnit5 test framework
    useJUnitPlatform()
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': 'payroll.PayrollApplication'
        )
    }
}

application {
    // Define the main class for the application.
    mainClass = 'payroll.PayrollApplication'
}

task runClient(type:JavaExec, dependsOn: classes){
    group = "DevOps"
    description = "Launches a chat client that connects to a server on localhost:59001 "
  
    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'payroll.PayrollApplication'
}

task backupSources(type: Copy) {
    description = 'Copia os ficheiros da pasta src para uma nova pasta backup'
    group = 'Backup'
    // Diretório de origem (src) e diretório de destino (backup)
    from  project.ext.srcLocation
    into project.ext.backupLocation
    
    // Informa ao Gradle para incluir tudo na pasta src
    include '**/*'
}

task zipBackup(type: Zip, dependsOn: backupSources){
    description = 'Cria um ficheiro .zip utilizando os ficheiros na pasta de backup'
    group = 'Backup'
    from(project.ext.backupLocation) {
        include '**/*'
    }
    archiveBaseName = project.name
    archiveExtension = 'zip'
}

task zipSource(type: Zip){
    description = 'Cria um ficheiro .zip utilizando o source code'
    group = 'Backup'
    from(project.ext.srcLocation) {
        include '**/*'
    }
    destinationDirectory = file("zipBackups")
    archiveBaseName = project.name
    archiveExtension = 'zip'
}

javadoc {
    title = 'Javadoc'
    destinationDir = file("${buildDir}/docs")
    source = fileTree(dir: 'src', include: '*/.java')
    classpath = sourceSets.main.compileClasspath + sourceSets.test.compileClasspath + sourceSets.integrationTest.compileClasspath
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        author = true
        version = true
        windowTitle = 'My Javadoc'
    }
}

task javadocZip(type: Zip) {
    dependsOn javadoc // depende da tarefa javadoc
    group = 'Backup'
    from javadoc.destinationDir // inclui os ficheiros gerados pela tarefa javadoc
    archiveFileName = "javadoc-${version}.zip" // nome do ficheiro zip
    destinationDirectory = file("${buildDir}/docs") // diretório de destino
}

task runInstallation(type: Exec, dependsOn: installDist){
    description = 'Executa a distribuição do projeto'
    group = 'Distribution'
    workingDir file("$buildDir/install/nonrest/bin")

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'nonrest.bat'
    } else {
        commandLine './nonrest'
    }
}

task integrationTest(type: Test) {
    description = 'Executa os testes de integração'
    group = 'Test'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()  // Ensure JUnit5 is used for integration tests
}

task startH2Server(type: JavaExec) {
    group = "DevOps"
    description = 'Inicializa a base de dados H2'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.h2.tools.Server'
    args = ['-tcp', '-tcpAllowOthers', '-tcpPort', '9092', '-baseDir', '/shared', '-ifNotExists']
}
